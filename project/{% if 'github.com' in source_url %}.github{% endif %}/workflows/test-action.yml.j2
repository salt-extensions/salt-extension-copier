{%- raw -%}
---
name: Testing

on:
  workflow_call:

jobs:
{%- endraw %}
{%- if "Linux" in os_support %}

  Linux:
    runs-on: ubuntu-{{ versions["ubuntu"] }}
{%-   raw %}
    timeout-minutes: 30

    strategy:
      fail-fast: false
{%-   endraw %}
{%-   set test_matrix = [] %}
{%-   for sver in range(salt_version_major, max_salt_version_major + 1) %}

{%-     if sver == max_salt_version_major %}
{%-       set sver_minor = (salt_latest_point[sver], max_salt_version_minor) | min %}
{%-     else %}
{%-       set sver_minor = salt_latest_point[sver] %}
{%-     endif %}

{%-     if salt_python_support[sver]["lts"] %}
{%-       set min_pyver = (python_requires[1], salt_python_support[sver]["min"][1]) | max %}
{%-     else %}
{%-       set min_pyver = (python_requires[1], salt_python_support[sver]["onedir"][1]) | max %}
{%-     endif %}

{%-     for pyver in range(
          min_pyver,
          (max_python_minor, salt_python_support[sver]["max"][1]) | min + 1
        ) %}
{%-       do test_matrix.append(("{}.{}".format(sver, sver_minor), "3.{}".format(pyver))) %}
{%-     endfor %}
{%-   endfor %}
      max-parallel: {{ (test_matrix | length, 12) | min }}
      matrix:
        include:
{%-   for sver, pyver in test_matrix %}
          - {salt-version: "{{ sver }}", python-version: "{{ pyver }}"}
{%-   endfor %}

    steps:
      - uses: actions/checkout@{{ versions["actions/checkout"] }}
{%-   raw %}
        with:
          fetch-depth: 2  # coverage: Issue detecting commit SHA

      - name: Set up Python ${{ matrix.python-version }}
{%-   endraw %}
        uses: actions/setup-python@{{ versions["actions/setup-python"] }}
{%-   raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Nox
        run: |
          python -m pip install --upgrade pip
          pip install nox

      - name: Install Test Requirements
        env:
          SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
        run: |
          nox --force-color -e tests-3 --install-only

      - name: Test
        env:
          SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
          SKIP_REQUIREMENTS_INSTALL: true
        run: |
          nox --force-color -e tests-3 -- -vv tests/

      - name: Create CodeCov Flags
        if: always()
        id: codecov-flags
        run: |
          echo "flags=$(python -c "import sys; print('{},{},salt_{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")" >> "$GITHUB_OUTPUT"

      - name: Upload Project Code Coverage
{%-   endraw %}
        uses: codecov/codecov-action@{{ versions["codecov/codecov-action"] }}
{%-   raw %}
        with:
          file: artifacts/coverage-project.xml
          disable_search: true
          fail_ci_if_error: false
          flags: ${{ steps.codecov-flags.outputs.flags }},project
          name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-project
          use_oidc: true
{%-   endraw %}
          version: {{ versions["codecov_cli"] }}
{%-   raw %}

      - name: Upload Tests Code Coverage
{%-   endraw %}
        uses: codecov/codecov-action@{{ versions["codecov/codecov-action"] }}
{%-   raw %}
        with:
          file: artifacts/coverage-tests.xml
          disable_search: true
          fail_ci_if_error: false
          flags: ${{ steps.codecov-flags.outputs.flags }},tests
          name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-tests
          use_oidc: true
{%-   endraw %}
          version: {{ versions["codecov_cli"] }}
{%-   raw %}

      - name: Upload Logs
        if: always()
{%-   endraw %}
        uses: actions/upload-artifact@{{ versions["actions/upload-artifact"] }}
{%-   raw %}
        with:
          name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}.log
          path: artifacts/runtests-*.log

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}

      - name: Upload Exit Status
        if: always()
{%-   endraw %}
        uses: actions/upload-artifact@{{ versions["actions/upload-artifact"] }}
{%-   raw %}
        with:
          name: exitstatus-${{ github.job }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}
          path: exitstatus
          if-no-files-found: error
{%-   endraw %}
{%- endif %}
{%- if "Windows" in os_support %}

  Windows:
    runs-on: windows-{{ versions["windows"] }}
{%-   raw %}
    timeout-minutes: 40

    strategy:
      fail-fast: false
{%-   endraw %}
{%-   set test_matrix = [] %}
{%-   for sver in range(salt_version_major, max_salt_version_major + 1) %}

{%-     if sver == max_salt_version_major %}
{%-       set sver_minor = (salt_latest_point[sver], max_salt_version_minor) | min %}
{%-     else %}
{%-       set sver_minor = salt_latest_point[sver] %}
{%-     endif %}

{%-     set pyver = (python_requires[1], salt_python_support[sver]["min"][1], 8) | max %}
{%-     do test_matrix.append(("{}.{}".format(sver, sver_minor), "3.{}".format(pyver))) %}
{%-   endfor %}
      max-parallel: {{ (test_matrix | length, 3) | min }}
      matrix:
        include:
{%-   for sver, pyver in test_matrix %}
          - {salt-version: "{{ sver }}", python-version: "{{ pyver }}"}
{%-   endfor %}

    steps:
      - uses: actions/checkout@{{ versions["actions/checkout"] }}
{%-   raw %}
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
{%-   endraw %}
        uses: actions/setup-python@{{ versions["actions/setup-python"] }}
{%-   raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Nox
        run: |
          python -m pip install --upgrade pip
          pip install nox

      - name: Install Test Requirements
        shell: bash
        env:
          SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
          # EXTRA_REQUIREMENTS_INSTALL: Cython
        run: |
          export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
          nox --force-color -e tests-3 --install-only

      - name: Test
        shell: bash
        env:
          SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
          SKIP_REQUIREMENTS_INSTALL: true
        run: |
          export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
          nox --force-color -e tests-3 -- -vv tests/

      - name: Create CodeCov Flags
        if: always()
        id: codecov-flags
        run: |
          echo "flags=$(python -c "import sys; print('{},{},salt_{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")" >> "$GITHUB_OUTPUT"

      - name: Upload Project Code Coverage
{%-   endraw %}
        uses: codecov/codecov-action@{{ versions["codecov/codecov-action"] }}
{%-   raw %}
        with:
          file: artifacts/coverage-project.xml
          disable_search: true
          fail_ci_if_error: false
          flags: ${{ steps.codecov-flags.outputs.flags }},project
          name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-project
          use_oidc: true
{%-   endraw %}
          version: {{ versions["codecov_cli"] }}
{%-   raw %}

      - name: Upload Tests Code Coverage
{%-   endraw %}
        uses: codecov/codecov-action@{{ versions["codecov/codecov-action"] }}
{%-   raw %}
        with:
          file: artifacts/coverage-tests.xml
          disable_search: true
          fail_ci_if_error: false
          flags: ${{ steps.codecov-flags.outputs.flags }},tests
          name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-tests
          use_oidc: true
{%-   endraw %}
          version: {{ versions["codecov_cli"] }}
{%-   raw %}

      - name: Upload Logs
        if: always()
{%-   endraw %}
        uses: actions/upload-artifact@{{ versions["actions/upload-artifact"] }}
{%-   raw %}
        with:
          name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}.log
          path: artifacts/runtests-*.log

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}

      - name: Upload Exit Status
        if: always()
{%-   endraw %}
        uses: actions/upload-artifact@{{ versions["actions/upload-artifact"] }}
{%-   raw %}
        with:
          name: exitstatus-${{ github.job }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}
          path: exitstatus
          if-no-files-found: error
{%-   endraw %}
{%- endif %}

{%- if "macOS" in os_support %}

  macOS:
    runs-on: macos-{{ versions["macos"] }}
{%-   raw %}
    timeout-minutes: 40

    strategy:
      fail-fast: false
{%-   endraw %}

{%-   set test_matrix = [] %}
{%-   set macos_pyver = [] %}
{%-   for sver in range(salt_version_major, max_salt_version_major + 1) %}

{%-     if sver == max_salt_version_major %}
{%-       set sver_minor = (salt_latest_point[sver], max_salt_version_minor) | min %}
{%-     else %}
{%-       set sver_minor = salt_latest_point[sver] %}
{%-     endif %}

{%-     set pyver = (python_requires[1], salt_python_support[sver]["min"][1], 8) | max + 1 %}
{%-     if pyver in macos_pyver %}
{%-       if pyver + (sver - salt_version_major) <= salt_python_support[sver]["max"][1] %}
{%-         set pyver = pyver + (sver - salt_version_major) %}
{%-       else %}
{%-         set pyver = salt_python_support[sver]["max"][1] %}
{%-       endif %}
{%-     endif %}
{%-     do macos_pyver.append(pyver) %}
{%-     do test_matrix.append(("{}.{}".format(sver, sver_minor), "3.{}".format(pyver))) %}
{%-   endfor %}
      max-parallel: {{ (test_matrix | length, 3) | min }}
      matrix:
        include:
{%-   for sver, pyver in test_matrix %}
          - {salt-version: "{{ sver }}", python-version: "{{ pyver }}"}
{%-   endfor %}
{%-   raw %}

    steps:
{%-   endraw %}
      - uses: actions/checkout@{{ versions["actions/checkout"] }}
{%-   raw %}
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
{%-   endraw %}
        uses: actions/setup-python@{{ versions["actions/setup-python"] }}
{%-   raw %}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Nox
        run: |
          python -m pip install --upgrade pip
          pip install nox

      - name: Install Test Requirements
        env:
          SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
        run: |
          nox --force-color -e tests-3 --install-only

      - name: Test
        env:
          SALT_REQUIREMENT: salt==${{ matrix.salt-version }}
          SKIP_REQUIREMENTS_INSTALL: true
        run: |
          nox --force-color -e tests-3 -- -vv tests/

      - name: Create CodeCov Flags
        if: always()
        id: codecov-flags
        run: |
          echo "flags=$(python -c "import sys; print('{},{},salt_{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")" >> "$GITHUB_OUTPUT"

      - name: Upload Project Code Coverage
{%-   endraw %}
        uses: codecov/codecov-action@{{ versions["codecov/codecov-action"] }}
{%-   raw %}
        with:
          file: artifacts/coverage-project.xml
          disable_search: true
          fail_ci_if_error: false
          flags: ${{ steps.codecov-flags.outputs.flags }},project
          name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-project
          use_oidc: true
{%-   endraw %}
          version: {{ versions["codecov_cli"] }}
{%-   raw %}

      - name: Upload Tests Code Coverage
{%-   endraw %}
        uses: codecov/codecov-action@{{ versions["codecov/codecov-action"] }}
{%-   raw %}
        with:
          file: artifacts/coverage-tests.xml
          disable_search: true
          fail_ci_if_error: false
          flags: ${{ steps.codecov-flags.outputs.flags }},tests
          name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}-tests
          use_oidc: true
{%-   endraw %}
          version: {{ versions["codecov_cli"] }}
{%-   raw %}

      - name: Upload Logs
        if: always()
{%-   endraw %}
        uses: actions/upload-artifact@{{ versions["actions/upload-artifact"] }}
{%-   raw %}
        with:
          name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}.log
          path: artifacts/runtests-*.log

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}

      - name: Upload Exit Status
        if: always()
{%-   endraw %}
        uses: actions/upload-artifact@{{ versions["actions/upload-artifact"] }}
{%-   raw %}
        with:
          name: exitstatus-${{ github.job }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt-version }}
          path: exitstatus
          if-no-files-found: error
{%-   endraw %}
{%- endif %}
