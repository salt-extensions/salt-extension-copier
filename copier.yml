---
project_name:
  type: str
  help: >
    Name of the project and generated extensions
    (don't include `saltext-` prefix)
  placeholder: vault
  validator: >-
    {%- if not project_name %}
    Project name cannot be empty.
    {%- endif %}
    {%- if not (project_name | regex_search("^[a-z][a-z0-9\-]+$")) %}
    Must start with [a-z], followed by at least one of [a-z0-9\-] (lowercase!)
    {%- endif %}

author:
  type: str
  help: Author for project metadata
  placeholder: Elliot Alderson
  validator: '{%- if not author %}Author cannot be empty{%- endif %}'

author_email:
  type: str
  help: The author's contact email address
  placeholder: elliotalderson@protonmail.ch
  validator: >-
    {%- if not author_email -%}Email cannot be empty
    {%- elif not author_email | regex_search("[\S]+@[^\.\s]+") -%}
    Does not look like a valid email address
    {%- endif -%}

integration_name:
  type: str
  help: >
    The full name of the integrated service. If this extension does not
    integrate one, just leave this empty.
  placeholder: HashiCorp Vault
  default: '{{ project_name.replace("-", " ").title() }}'

summary:
  type: str
  help: A summary for project metadata and the readme
  default: >-
    Salt Extension for interacting with
    {{ integration_name or project_name.replace("-", " ").title() }}

url:
  type: str
  help: The project's homepage (usually the URL of the hosted repo)
  default: https://github.com/salt-extensions/saltext-{{ project_name }}
  validator: '{%- if not url %}URL cannot be empty{%- endif %}'

source_url:
  type: str
  help: The project's repo URL
  default: >-
    {%- if "github.com" in url -%}
      {{ url }}
    {%- else -%}
      https://github.com/salt-extensions/saltext-{{ project_name }}
    {%- endif %}
  validator: >-
    {%- if "://" not in source_url -%}Does not look like a valid URL
    {%- endif %}

tracker_url:
  type: str
  help: The project's issue tracker URL
  default: >-
    {%- if "github.com" in source_url -%}
      {{ source_url }}/issues
    {%- endif -%}
  validator: >-
    {%- if tracker_url and "://" not in tracker_url -%}Does not look like a valid URL
    {%- endif %}

package_name:
  type: str
  help: The name of the Python package (without `saltext.` prefix)
  default: '{{ project_name | regex_replace("[-_.]+", "_") }}'
  validator: >-
    {%- if not package_name %}
    Package name cannot be empty.
    {%- endif %}
    {%- if not (package_name | regex_search("^[a-z][a-z0-9_]+$")) %}
    Must start with [a-z], followed by at least one of [a-z0-9_] (lowercase!)
    {%- endif %}

license:
  type: str
  help: Choose a license for the project
  default: apache
  choices:
    - apache
    - other

license_classifier:
  type: str
  help: The classifier for {{ license }}. See https://pypi.org/classifiers.
  when: '{{ license != "apache" }}'
  default: '{%- if license == "apache" %}License :: OSI Approved :: Apache Software License{%- endif %}'
  placeholder: '{%- if license != "apache" %}License :: OSI Approved :: Apache Software License{%- endif %}'
  validator: '{%- if " :: " not in license_classifier %}Invalid license classifier{%- endif %}'

license_name:
  type: str
  when: false
  default: '{{ license_classifier.split(" :: ") | last }}'

loaders:
  type: str
  help: Which module types should be implemented
  default:
    - module
    - state
  choices:
    - auth
    - beacon
    - cache
    - cloud
    - engine
    - executor
    - fileserver
    - grain
    - log_handler
    - matcher
    - metaproxy
    - module
    - netapi
    - output
    - pillar
    - pkgdb
    - pkgfile
    - proxy
    - queue
    - renderer
    - returner
    - roster
    - runner
    - sdb
    - serializer
    - state
    - thorium
    - token
    - top
    - wheel
    - wrapper
  multiselect: true

salt_version:
  type: str
  help: Minimum Salt version to support
  default: '3006'
  validator: >-
    {%- import "data/salt_python_support.yaml" as sps -%}
    {%- set sup = sps | string | from_yaml -%}
    {%- if salt_version | float | int not in sup -%}
    Unknown Salt version. Known major: {{ sup | join(", ") }}
    {%- endif -%}

python_requires:
  type: str
  help: Minimum Python version to support
  default: >-
    {%- import "data/salt_python_support.yaml" as sps -%}
    {%- set sup = sps | string | from_yaml -%}
    {{- sup[salt_version | float | int]["min"] | join(".") -}}
  validator: >-
    {%- import "data/salt_python_support.yaml" as sps -%}
    {%- set sup = sps | string | from_yaml -%}
    {%- set minsup = sup[salt_version | float | int]["min"] -%}
    {%- set selected = python_requires.split(".") | map("int") | list -%}
    {%- if selected < minsup -%}
    Minimum supported Python version of Salt {{ salt_version }} is {{ minsup | join(".") }}
    {%- endif -%}

max_salt_version:
  type: int
  help: The maximum Salt major version to support
  default: 3007
  validator: >-
    {%- import "data/salt_python_support.yaml" as sps -%}
    {%- set sup = sps | string | from_yaml -%}
    {%- if max_salt_version | float | int not in sup -%}
    Unknown Salt version. Known major: {{ sup | join(", ") }}
    {%- endif -%}

no_saltext_namespace:
  type: bool
  help: Omit the `saltext` namespace
  default: false

ssh_fixtures:
  type: bool
  help: Generate pytest fixtures for salt-ssh
  default: '{{ "wrapper" in loaders }}'
  when: '{{ "wrapper" not in loaders }}'

test_containers:
  type: bool
  help: Add support for test containers in functional/integration tests
  default: false

workflows:
  type: str
  help: Choose which workflow style to create
  default: '{{ "org" if "github.com/salt-extensions/" in source_url else "enhanced" }}'
  choices:
    basic (== official creation tool): basic
    enhanced (~ organization, but local): enhanced
    organization (rely on centralized artifacts from salt-extensions org): org

deploy_docs:
  type: str
  help: >-
    When to automatically deploy CI built docs to GitHub Pages.
    Does not support versioned docs currently.
    Requires Settings > Pages > Build and deployment source to be `GitHub Actions`.
  default: never
  choices:
    never: never
    when tagging a release: release
    all events on `main` (rolling): rolling
  when: '{{ "github.com" in source_url and workflows != "basic" }}'

docs_url:
  type: str
  help: The project's documentation URL (optional)
  default: >-
    {%- if deploy_docs != "never" -%}
      {%- set repo_parts = source_url.split("github.com/")[1].split("/") -%}
      {{- "https://{}.github.io/{}/".format(repo_parts[0], repo_parts[1]) -}}
    {%- endif -%}
  validator: >-
    {%- if docs_url and "://" not in docs_url -%}Does not look like a valid URL
    {%- endif %}

coc_contact:
  type: str
  help: Optionally provide a contact for Code of Conduct violation reports.
  default: ''

copyright_begin:
  help: Copyright range beginning year
  type: int
  default: '{{ "%Y" | strftime }}'
  # Cannot use when: false to set this once automatically during
  # creation since the value is not recorded then.

# ===========================================
# | Computed values for less ugly templates |
# ===========================================

package_namespace:
  type: str
  when: false
  default: '{%- if not no_saltext_namespace %}saltext{%- endif %}'

package_namespace_pkg:
  type: str
  when: false
  default: '{%- if package_namespace %}{{ package_namespace }}.{%- endif %}'

package_namespace_path:
  type: str
  when: false
  default: '{%- if package_namespace %}{{ package_namespace }}/{%- endif %}'

namespaced_package_path:
  type: str
  when: false
  default: '{{ package_namespace_path ~ package_name }}'

namespaced_package_pkg:
  type: str
  when: false
  default: '{{ package_namespace_pkg ~ package_name }}'

project_name_full:
  type: str
  when: false
  default: >-
    {%- if package_namespace %}
    {{- package_namespace }}-{{ project_name }}
    {%- else %}
    {{- project_name }}
    {%- endif %}

# ========================================
# | Migrations between template versions |
# ========================================

_migrations:
  - version: 0.3.0
    before:
      # The minimum Python version was raised from 3.7 to 3.8. If the default answer
      # is not changed before rendering the template, it fails.
      - >
          awk '/^python_requires:/ {sub("3.7", "3.8")}1' {{ _copier_conf.answers_file }} >
          {{ _copier_conf.answers_file }}.tmp &&
          mv {{ _copier_conf.answers_file }}.tmp {{ _copier_conf.answers_file }}

# =====================================
# | Copier settings for this template |
# =====================================

# We need multiselect functionality
_min_copier_version: "9.1.0"

# The template root is found here
_subdirectory: project

# Don't offer updates to implementation-specific files
_skip_if_exists:
  - tests/**/test_*.py
  - src/**/*_mod.py

# Ensure we're compatible with the official tool
_templates_suffix: j2

# We need those extensions as helpers
_jinja_extensions:
  - copier_templates_extensions.TemplateExtensionLoader
  - jinja_extensions/saltext.py:YamlDumper
  - jinja_extensions/saltext.py:SaltExt
  - jinja2.ext.do
  - jinja2.ext.loopcontrols

# Before initialization, describe briefly what this is about
_message_before_copy: |
  Welcome to salt-extension-copier!

  Even after generation, this template can be used to perform
  updates to your project's boilerplate.

  Feel free to submit a PR if you think something should be improved. :)

# Describe next steps and rough usage after project initialization
_message_after_copy: |
  Your Salt extension project "{{ project_name_full }}" has been created successfully!

  Next steps:

  1. Change directory to the project root:

     $ cd {{ _copier_conf.dst_path }}

  2. Initialize a Git repository:

     $ git init

  3. Create a Python virtual environment:

     $ python -m venv venv --prompt='{{ project_name_full }}'

  4. Source it:

     $ source venv/bin/activate

  5. Install your project and dependencies in editable mode:

     $ python -m pip install -e '.[dev,tests,docs]'

  6. Install pre-commit hooks:

     $ pre-commit install

  7. Run the pre-commit hooks (the commit will fail the first time):

     $ git add . && git commit

  8. Perform the initial commit:

     $ git add . && git commit -m "Initial extension layout"


  To run the test suite:

     $ nox -e tests-3


  Please update the tests :) Happy hacking!
